#include <mega32.h>
#include <delay.h>
#include <alcd.h>

unsigned char data[4]={0x0f,0x0f,0x0f,0x0f};

void display(void)
{
register unsigned char i;
unsigned char select[4]={0x80,0x40,0x20,0x10};
for(i=0;i<4;i++){
PORTD=data[i];
PORTD=PORTD | select[i];
delay_ms(5);
PORTD=0x0f;
}
}

void main(void)
{

// Declare your local variables here
unsigned char j;
unsigned int c,p1,q,i1,i2,i4,x=0;
int i3,a,a1=0;
// Input/Output Ports initialization
// Port A initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);

// Port B initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
// State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P 
PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);

// Port C initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);

// Port D initialization
// Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 

DDRD=0xff;
PORTD=0x0f;

TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
TCNT0=0x00;
OCR0=0x00;
TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
TCNT1H=0x00;
TCNT1L=0x00;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;

// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer2 Stopped
// Mode: Normal top=0xFF
// OC2 output: Disconnected
ASSR=0<<AS2;
TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
TCNT2=0x00;
OCR2=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);

// External Interrupt(s) initialization
// INT0: Off
// INT1: Off
// INT2: Off
MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
MCUCSR=(0<<ISC2);

// USART initialization
// USART disabled
UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);


ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
SFIOR=(0<<ACME);

// ADC initialization
// ADC disabled
ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);

// SPI initialization
// SPI disabled
SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);

// TWI initialization
// TWI disabled
TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);

// Characters/line: 16
lcd_init(16);

while (1)
      { 
      
l1:
 
    
if(c==0)
     {
     lcd_clear();
     lcd_puts("Choose Food");
     lcd_gotoxy(0,1);
     lcd_puts("A B C D");
     c++;
     }
      
     
     
     if(PINB.0==0)
      {
      delay_ms(20);
      while(PINB.0==0);
      if(p1>0)
      {i1=i1+10;}
      if(p1==0)
      {q=1;} 
      p1++;
      }
       
      if(PINB.1==0)
      {
      delay_ms(20);
      while(PINB.1==0);
      if(p1>0)
      {i1=i1+5;}
      if(p1==0)
      {q=2;}
      p1++;
      }
      
      if(PINB.2==0)
      {
      delay_ms(20);
      while(PINB.2==0);
      if(p1>0)
      {i1=i1+1;} 
      if(p1==0)
      {q=3;}
      p1++;
      }
      
      if(PINB.3==0)
      {
      delay_ms(20);
      while(PINB.3==0);
      a1++;
      if(p1>0)
      {a++;} 
      if(p1==0)
      {q=4;} 
      p1++;
      } 
      
     
      if(PINB.4==0)
      {
      delay_ms(20);
      while(PINB.4==0);
      c=0;p1=0;q=0;i1=0;i2=0;i4=0;x=0;
      i3=0;a=0;a1=0;
      data[4]={0x0f,0x0f,0x0f,0x0f};
      goto l1;
      }  
      
      if(q==1)
      {
      lcd_clear();
      lcd_puts("Food A");
      lcd_gotoxy(0,1);
      lcd_puts("Price=50 cent"); 
      x=50;
      if(i1==50)
      {
      lcd_clear();
      lcd_puts("paid");delay_ms(1000);q=0;c=0;  goto l1;
      }               
      
       if(i1>50)
      {
      lcd_clear();
      lcd_puts("extra paid"); delay_ms(1000);q=0;c=0;  goto l1;
      }             
      
      }  
      
       if(q==2)
      {
      lcd_clear();
      lcd_puts("Food B");
      lcd_gotoxy(0,1);
      lcd_puts("Price=65 cent"); 
      x=65;
      if(i1==65)
      {
      lcd_clear();
      lcd_puts("paid"); delay_ms(1000);q=0;c=0; goto l1;
      }               
      
       if(i1>65)
      {
      lcd_clear();
      lcd_puts("extra paid");  delay_ms(1000);q=0;c=0;  goto l1;
      }             
      
      }  
        
       if(q==3)
      {
      lcd_clear();
      lcd_puts("Food C");
      lcd_gotoxy(0,1);
      lcd_puts("Price=77 cent"); 
      x=77;
      if(i1==77)
      {
      lcd_clear();
      lcd_puts("paid");   delay_ms(1000);q=0;c=0; goto l1;
      }               
      
       if(i1>77)
      {
      lcd_clear();
      lcd_puts("extra paid");  delay_ms(1000);q=0;c=0;  goto l1;
      }             
      
      }  
      
       if(q==4)
      {
      lcd_clear();
      lcd_puts("Food D");
      lcd_gotoxy(0,1);
      lcd_puts("Price=63 cent"); 
      x=63;
      if(i1==63)
      {
      lcd_clear();
      lcd_puts("paid");  delay_ms(1000);q=0;c=0;     goto l1;
      }               
      
       if(i1>63)
      {
      lcd_clear();
      lcd_puts("extra paid");  delay_ms(1000);q=0;c=0;        goto l1;
      }             
      
      }  
       
      i2=i1;
      i3=i2-x; 
      if(a==1)
      {
      i3=i2;
      }
     for(j=0;j<4;j++)
    { 
       
    if(i3>0)
    {
    data[j]=i3%10;
    i3=i3/10;
    }
    }
    
     for(j=0;j<10;j++) display(); 
     
      }
      
}
