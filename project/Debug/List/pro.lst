
AVRASM ver. 2.1.30  C:\Users\novin.co\Desktop\project\project\Debug\List\pro.asm Wed Jul 07 10:50:02 2021

C:\Users\novin.co\Desktop\project\project\Debug\List\pro.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\novin.co\Desktop\project\project\Debug\List\pro.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\novin.co\Desktop\project\project\Debug\List\pro.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00a6 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x3:
00002a 0f0f
00002b 0f0f      	.DB  0xF,0xF,0xF,0xF
                 _0x0:
00002c 6843
00002d 6f6f
00002e 6573
00002f 4620      	.DB  0x43,0x68,0x6F,0x6F,0x73,0x65,0x20,0x46
000030 6f6f
000031 0064
000032 2041
000033 2042      	.DB  0x6F,0x6F,0x64,0x0,0x41,0x20,0x42,0x20
000034 2043
000035 0044
000036 6f46
000037 646f      	.DB  0x43,0x20,0x44,0x0,0x46,0x6F,0x6F,0x64
000038 4120
000039 5000
00003a 6972
00003b 6563      	.DB  0x20,0x41,0x0,0x50,0x72,0x69,0x63,0x65
00003c 353d
00003d 2030
00003e 6563
00003f 746e      	.DB  0x3D,0x35,0x30,0x20,0x63,0x65,0x6E,0x74
000040 7000
000041 6961
000042 0064
000043 7865      	.DB  0x0,0x70,0x61,0x69,0x64,0x0,0x65,0x78
000044 7274
000045 2061
000046 6170
000047 6469      	.DB  0x74,0x72,0x61,0x20,0x70,0x61,0x69,0x64
000048 4600
000049 6f6f
00004a 2064
00004b 0042      	.DB  0x0,0x46,0x6F,0x6F,0x64,0x20,0x42,0x0
00004c 7250
00004d 6369
00004e 3d65
00004f 3536      	.DB  0x50,0x72,0x69,0x63,0x65,0x3D,0x36,0x35
000050 6320
000051 6e65
000052 0074
000053 6f46      	.DB  0x20,0x63,0x65,0x6E,0x74,0x0,0x46,0x6F
000054 646f
000055 4320
000056 5000
000057 6972      	.DB  0x6F,0x64,0x20,0x43,0x0,0x50,0x72,0x69
000058 6563
000059 373d
00005a 2037
00005b 6563      	.DB  0x63,0x65,0x3D,0x37,0x37,0x20,0x63,0x65
00005c 746e
00005d 4600
00005e 6f6f
00005f 2064      	.DB  0x6E,0x74,0x0,0x46,0x6F,0x6F,0x64,0x20
000060 0044
000061 7250
000062 6369
000063 3d65      	.DB  0x44,0x0,0x50,0x72,0x69,0x63,0x65,0x3D
000064 3336
000065 6320
000066 6e65
000067 0074      	.DB  0x36,0x33,0x20,0x63,0x65,0x6E,0x74,0x0
                 _0x2000003:
000068 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000069 0004      	.DW  0x04
00006a 0308      	.DW  _data
00006b 0054      	.DW  _0x3*2
                 
00006c 000c      	.DW  0x0C
00006d 0260      	.DW  _0xC
00006e 0058      	.DW  _0x0*2
                 
00006f 0008      	.DW  0x08
000070 026c      	.DW  _0xC+12
000071 0064      	.DW  _0x0*2+12
                 
000072 0007      	.DW  0x07
000073 0274      	.DW  _0xC+20
000074 006c      	.DW  _0x0*2+20
                 
000075 000e      	.DW  0x0E
000076 027b      	.DW  _0xC+27
000077 0073      	.DW  _0x0*2+27
                 
000078 0005      	.DW  0x05
000079 0289      	.DW  _0xC+41
00007a 0081      	.DW  _0x0*2+41
                 
00007b 000b      	.DW  0x0B
00007c 028e      	.DW  _0xC+46
00007d 0086      	.DW  _0x0*2+46
                 
00007e 0007      	.DW  0x07
00007f 0299      	.DW  _0xC+57
000080 0091      	.DW  _0x0*2+57
                 
000081 000e      	.DW  0x0E
000082 02a0      	.DW  _0xC+64
000083 0098      	.DW  _0x0*2+64
                 
000084 0005      	.DW  0x05
000085 02ae      	.DW  _0xC+78
000086 0081      	.DW  _0x0*2+41
                 
000087 000b      	.DW  0x0B
000088 02b3      	.DW  _0xC+83
000089 0086      	.DW  _0x0*2+46
                 
00008a 0007      	.DW  0x07
00008b 02be      	.DW  _0xC+94
00008c 00a6      	.DW  _0x0*2+78
                 
00008d 000e      	.DW  0x0E
00008e 02c5      	.DW  _0xC+101
00008f 00ad      	.DW  _0x0*2+85
                 
000090 0005      	.DW  0x05
000091 02d3      	.DW  _0xC+115
000092 0081      	.DW  _0x0*2+41
                 
000093 000b      	.DW  0x0B
000094 02d8      	.DW  _0xC+120
000095 0086      	.DW  _0x0*2+46
                 
000096 0007      	.DW  0x07
000097 02e3      	.DW  _0xC+131
000098 00bb      	.DW  _0x0*2+99
                 
000099 000e      	.DW  0x0E
00009a 02ea      	.DW  _0xC+138
00009b 00c2      	.DW  _0x0*2+106
                 
00009c 0005      	.DW  0x05
00009d 02f8      	.DW  _0xC+152
00009e 0081      	.DW  _0x0*2+41
                 
00009f 000b      	.DW  0x0B
0000a0 02fd      	.DW  _0xC+157
0000a1 0086      	.DW  _0x0*2+46
                 
0000a2 0002      	.DW  0x02
0000a3 030c      	.DW  __base_y_G100
0000a4 00d0      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
0000a5 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000a6 94f8      	CLI
0000a7 27ee      	CLR  R30
0000a8 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000a9 e0f1      	LDI  R31,1
0000aa bffb      	OUT  GICR,R31
0000ab bfeb      	OUT  GICR,R30
0000ac bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000ad e08d      	LDI  R24,(14-2)+1
0000ae e0a2      	LDI  R26,2
0000af 27bb      	CLR  R27
                 __CLEAR_REG:
0000b0 93ed      	ST   X+,R30
0000b1 958a      	DEC  R24
0000b2 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000b3 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000b4 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000b5 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000b6 93ed      	ST   X+,R30
0000b7 9701      	SBIW R24,1
0000b8 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000b9 ede2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000ba e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000bb 9185      	LPM  R24,Z+
0000bc 9195      	LPM  R25,Z+
0000bd 9700      	SBIW R24,0
0000be f061      	BREQ __GLOBAL_INI_END
0000bf 91a5      	LPM  R26,Z+
0000c0 91b5      	LPM  R27,Z+
0000c1 9005      	LPM  R0,Z+
0000c2 9015      	LPM  R1,Z+
0000c3 01bf      	MOVW R22,R30
0000c4 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000c5 9005      	LPM  R0,Z+
0000c6 920d      	ST   X+,R0
0000c7 9701      	SBIW R24,1
0000c8 f7e1      	BRNE __GLOBAL_INI_LOOP
0000c9 01fb      	MOVW R30,R22
0000ca cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000cb e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000cc bfed      	OUT  SPL,R30
0000cd e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000ce bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000cf e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000d0 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000d1 940c 00f9 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;
                 ;unsigned char data[4]={0x0f,0x0f,0x0f,0x0f};
                 
                 	.DSEG
                 ;
                 ;void display(void)
                 ; 0000 0008 {
                 
                 	.CSEG
                 _display:
                 ; .FSTART _display
                 ; 0000 0009 register unsigned char i;
                 ; 0000 000A unsigned char select[4]={0x80,0x40,0x20,0x10};
                 ; 0000 000B for(i=0;i<4;i++){
0000d3 9724      	SBIW R28,4
0000d4 e8e0      	LDI  R30,LOW(128)
0000d5 83e8      	ST   Y,R30
0000d6 e4e0      	LDI  R30,LOW(64)
0000d7 83e9      	STD  Y+1,R30
0000d8 e2e0      	LDI  R30,LOW(32)
0000d9 83ea      	STD  Y+2,R30
0000da e1e0      	LDI  R30,LOW(16)
0000db 83eb      	STD  Y+3,R30
0000dc 931a      	ST   -Y,R17
                 ;	i -> R17
                 ;	select -> Y+1
0000dd e010      	LDI  R17,LOW(0)
                 _0x5:
0000de 3014      	CPI  R17,4
0000df f4b0      	BRSH _0x6
                 ; 0000 000C PORTD=data[i];
0000e0 940e 0301 	CALL SUBOPT_0x0
0000e2 81e0      	LD   R30,Z
0000e3 bbe2      	OUT  0x12,R30
                 ; 0000 000D PORTD=PORTD | select[i];
0000e4 b202      	IN   R0,18
0000e5 2fe1      	MOV  R30,R17
0000e6 e0f0      	LDI  R31,0
0000e7 01de      	MOVW R26,R28
0000e8 9611      	ADIW R26,1
0000e9 0fae      	ADD  R26,R30
0000ea 1fbf      	ADC  R27,R31
0000eb 91ec      	LD   R30,X
0000ec 29e0      	OR   R30,R0
0000ed bbe2      	OUT  0x12,R30
                 ; 0000 000E delay_ms(5);
0000ee e0a5      	LDI  R26,LOW(5)
0000ef e0b0      	LDI  R27,0
0000f0 940e 032a 	CALL _delay_ms
                 ; 0000 000F PORTD=0x0f;
0000f2 e0ef      	LDI  R30,LOW(15)
0000f3 bbe2      	OUT  0x12,R30
                 ; 0000 0010 }
0000f4 5f1f      	SUBI R17,-1
0000f5 cfe8      	RJMP _0x5
                 _0x6:
                 ; 0000 0011 }
0000f6 8118      	LDD  R17,Y+0
0000f7 9625      	ADIW R28,5
0000f8 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0014 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0015 
                 ; 0000 0016 // Declare your local variables here
                 ; 0000 0017 unsigned char j;
                 ; 0000 0018 unsigned int c,p1,q,i1,i2,i4,x=0;
                 ; 0000 0019 int i3,a,a1=0;
                 ; 0000 001A // Input/Output Ports initialization
                 ; 0000 001B // Port A initialization
                 ; 0000 001C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 001D DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000f9 9760      	SBIW R28,16
0000fa e0e0      	LDI  R30,LOW(0)
0000fb 83e8      	ST   Y,R30
0000fc 83e9      	STD  Y+1,R30
0000fd 83ea      	STD  Y+2,R30
0000fe 83eb      	STD  Y+3,R30
0000ff 83ec      	STD  Y+4,R30
000100 83ed      	STD  Y+5,R30
000101 83ee      	STD  Y+6,R30
000102 83ef      	STD  Y+7,R30
                 ;	j -> R17
                 ;	c -> R18,R19
                 ;	p1 -> R20,R21
                 ;	q -> Y+14
                 ;	i1 -> Y+12
                 ;	i2 -> Y+10
                 ;	i4 -> Y+8
                 ;	x -> Y+6
                 ;	i3 -> Y+4
                 ;	a -> Y+2
                 ;	a1 -> Y+0
000103 bbea      	OUT  0x1A,R30
                 ; 0000 001E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 001F PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000104 bbeb      	OUT  0x1B,R30
                 ; 0000 0020 
                 ; 0000 0021 // Port B initialization
                 ; 0000 0022 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0023 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000105 bbe7      	OUT  0x17,R30
                 ; 0000 0024 // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
                 ; 0000 0025 PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
000106 efef      	LDI  R30,LOW(255)
000107 bbe8      	OUT  0x18,R30
                 ; 0000 0026 
                 ; 0000 0027 // Port C initialization
                 ; 0000 0028 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0029 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000108 e0e0      	LDI  R30,LOW(0)
000109 bbe4      	OUT  0x14,R30
                 ; 0000 002A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 002B PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00010a bbe5      	OUT  0x15,R30
                 ; 0000 002C 
                 ; 0000 002D // Port D initialization
                 ; 0000 002E // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 002F 
                 ; 0000 0030 DDRD=0xff;
00010b efef      	LDI  R30,LOW(255)
00010c bbe1      	OUT  0x11,R30
                 ; 0000 0031 PORTD=0x0f;
00010d e0ef      	LDI  R30,LOW(15)
00010e bbe2      	OUT  0x12,R30
                 ; 0000 0032 
                 ; 0000 0033 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
00010f e0e0      	LDI  R30,LOW(0)
000110 bfe3      	OUT  0x33,R30
                 ; 0000 0034 TCNT0=0x00;
000111 bfe2      	OUT  0x32,R30
                 ; 0000 0035 OCR0=0x00;
000112 bfec      	OUT  0x3C,R30
                 ; 0000 0036 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000113 bdef      	OUT  0x2F,R30
                 ; 0000 0037 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000114 bdee      	OUT  0x2E,R30
                 ; 0000 0038 TCNT1H=0x00;
000115 bded      	OUT  0x2D,R30
                 ; 0000 0039 TCNT1L=0x00;
000116 bdec      	OUT  0x2C,R30
                 ; 0000 003A ICR1H=0x00;
000117 bde7      	OUT  0x27,R30
                 ; 0000 003B ICR1L=0x00;
000118 bde6      	OUT  0x26,R30
                 ; 0000 003C OCR1AH=0x00;
000119 bdeb      	OUT  0x2B,R30
                 ; 0000 003D OCR1AL=0x00;
00011a bdea      	OUT  0x2A,R30
                 ; 0000 003E OCR1BH=0x00;
00011b bde9      	OUT  0x29,R30
                 ; 0000 003F OCR1BL=0x00;
00011c bde8      	OUT  0x28,R30
                 ; 0000 0040 
                 ; 0000 0041 // Timer/Counter 2 initialization
                 ; 0000 0042 // Clock source: System Clock
                 ; 0000 0043 // Clock value: Timer2 Stopped
                 ; 0000 0044 // Mode: Normal top=0xFF
                 ; 0000 0045 // OC2 output: Disconnected
                 ; 0000 0046 ASSR=0<<AS2;
00011d bde2      	OUT  0x22,R30
                 ; 0000 0047 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
00011e bde5      	OUT  0x25,R30
                 ; 0000 0048 TCNT2=0x00;
00011f bde4      	OUT  0x24,R30
                 ; 0000 0049 OCR2=0x00;
000120 bde3      	OUT  0x23,R30
                 ; 0000 004A 
                 ; 0000 004B // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 004C TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000121 bfe9      	OUT  0x39,R30
                 ; 0000 004D 
                 ; 0000 004E // External Interrupt(s) initialization
                 ; 0000 004F // INT0: Off
                 ; 0000 0050 // INT1: Off
                 ; 0000 0051 // INT2: Off
                 ; 0000 0052 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000122 bfe5      	OUT  0x35,R30
                 ; 0000 0053 MCUCSR=(0<<ISC2);
000123 bfe4      	OUT  0x34,R30
                 ; 0000 0054 
                 ; 0000 0055 // USART initialization
                 ; 0000 0056 // USART disabled
                 ; 0000 0057 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000124 b9ea      	OUT  0xA,R30
                 ; 0000 0058 
                 ; 0000 0059 
                 ; 0000 005A ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000125 e8e0      	LDI  R30,LOW(128)
000126 b9e8      	OUT  0x8,R30
                 ; 0000 005B SFIOR=(0<<ACME);
000127 e0e0      	LDI  R30,LOW(0)
000128 bfe0      	OUT  0x30,R30
                 ; 0000 005C 
                 ; 0000 005D // ADC initialization
                 ; 0000 005E // ADC disabled
                 ; 0000 005F ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000129 b9e6      	OUT  0x6,R30
                 ; 0000 0060 
                 ; 0000 0061 // SPI initialization
                 ; 0000 0062 // SPI disabled
                 ; 0000 0063 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
00012a b9ed      	OUT  0xD,R30
                 ; 0000 0064 
                 ; 0000 0065 // TWI initialization
                 ; 0000 0066 // TWI disabled
                 ; 0000 0067 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
00012b bfe6      	OUT  0x36,R30
                 ; 0000 0068 
                 ; 0000 0069 // Characters/line: 16
                 ; 0000 006A lcd_init(16);
00012c e1a0      	LDI  R26,LOW(16)
00012d d1ac      	RCALL _lcd_init
                 ; 0000 006B 
                 ; 0000 006C while (1)
                 _0x7:
                 ; 0000 006D       {
                 ; 0000 006E 
                 ; 0000 006F l1:
                 _0xA:
                 ; 0000 0070 
                 ; 0000 0071 
                 ; 0000 0072 if(c==0)
00012e 2e02      	MOV  R0,R18
00012f 2a03      	OR   R0,R19
000130 f451      	BRNE _0xB
                 ; 0000 0073      {
                 ; 0000 0074      lcd_clear();
000131 d179      	RCALL _lcd_clear
                 ; 0000 0075      lcd_puts("Choose Food");
                +
000132 e6a0     +LDI R26 , LOW ( _0xC + ( 0 ) )
000133 e0b2     +LDI R27 , HIGH ( _0xC + ( 0 ) )
                 	__POINTW2MN _0xC,0
000134 940e 0306 	CALL SUBOPT_0x1
                 ; 0000 0076      lcd_gotoxy(0,1);
                 ; 0000 0077      lcd_puts("A B C D");
                +
000136 e6ac     +LDI R26 , LOW ( _0xC + ( 12 ) )
000137 e0b2     +LDI R27 , HIGH ( _0xC + ( 12 ) )
                 	__POINTW2MN _0xC,12
000138 d190      	RCALL _lcd_puts
                 ; 0000 0078      c++;
                +
000139 5f2f     +SUBI R18 , LOW ( - 1 )
00013a 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0000 0079      }
                 ; 0000 007A 
                 ; 0000 007B 
                 ; 0000 007C 
                 ; 0000 007D      if(PINB.0==0)
                 _0xB:
00013b 99b0      	SBIC 0x16,0
00013c c016      	RJMP _0xD
                 ; 0000 007E       {
                 ; 0000 007F       delay_ms(20);
00013d 940e 030b 	CALL SUBOPT_0x2
                 ; 0000 0080       while(PINB.0==0);
                 _0xE:
00013f 9bb0      	SBIS 0x16,0
000140 cffe      	RJMP _0xE
                 ; 0000 0081       if(p1>0)
000141 2400      	CLR  R0
000142 1604      	CP   R0,R20
000143 0605      	CPC  R0,R21
000144 f428      	BRSH _0x11
                 ; 0000 0082       {i1=i1+10;}
000145 85ec      	LDD  R30,Y+12
000146 85fd      	LDD  R31,Y+12+1
000147 963a      	ADIW R30,10
000148 87ec      	STD  Y+12,R30
000149 87fd      	STD  Y+12+1,R31
                 ; 0000 0083       if(p1==0)
                 _0x11:
00014a 2e04      	MOV  R0,R20
00014b 2a05      	OR   R0,R21
00014c f421      	BRNE _0x12
                 ; 0000 0084       {q=1;}
00014d e0e1      	LDI  R30,LOW(1)
00014e e0f0      	LDI  R31,HIGH(1)
00014f 87ee      	STD  Y+14,R30
000150 87ff      	STD  Y+14+1,R31
                 ; 0000 0085       p1++;
                 _0x12:
                +
000151 5f4f     +SUBI R20 , LOW ( - 1 )
000152 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
                 ; 0000 0086       }
                 ; 0000 0087 
                 ; 0000 0088       if(PINB.1==0)
                 _0xD:
000153 99b1      	SBIC 0x16,1
000154 c015      	RJMP _0x13
                 ; 0000 0089       {
                 ; 0000 008A       delay_ms(20);
000155 d1b5      	RCALL SUBOPT_0x2
                 ; 0000 008B       while(PINB.1==0);
                 _0x14:
000156 9bb1      	SBIS 0x16,1
000157 cffe      	RJMP _0x14
                 ; 0000 008C       if(p1>0)
000158 2400      	CLR  R0
000159 1604      	CP   R0,R20
00015a 0605      	CPC  R0,R21
00015b f428      	BRSH _0x17
                 ; 0000 008D       {i1=i1+5;}
00015c 85ec      	LDD  R30,Y+12
00015d 85fd      	LDD  R31,Y+12+1
00015e 9635      	ADIW R30,5
00015f 87ec      	STD  Y+12,R30
000160 87fd      	STD  Y+12+1,R31
                 ; 0000 008E       if(p1==0)
                 _0x17:
000161 2e04      	MOV  R0,R20
000162 2a05      	OR   R0,R21
000163 f421      	BRNE _0x18
                 ; 0000 008F       {q=2;}
000164 e0e2      	LDI  R30,LOW(2)
000165 e0f0      	LDI  R31,HIGH(2)
000166 87ee      	STD  Y+14,R30
000167 87ff      	STD  Y+14+1,R31
                 ; 0000 0090       p1++;
                 _0x18:
                +
000168 5f4f     +SUBI R20 , LOW ( - 1 )
000169 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
                 ; 0000 0091       }
                 ; 0000 0092 
                 ; 0000 0093       if(PINB.2==0)
                 _0x13:
00016a 99b2      	SBIC 0x16,2
00016b c015      	RJMP _0x19
                 ; 0000 0094       {
                 ; 0000 0095       delay_ms(20);
00016c d19e      	RCALL SUBOPT_0x2
                 ; 0000 0096       while(PINB.2==0);
                 _0x1A:
00016d 9bb2      	SBIS 0x16,2
00016e cffe      	RJMP _0x1A
                 ; 0000 0097       if(p1>0)
00016f 2400      	CLR  R0
000170 1604      	CP   R0,R20
000171 0605      	CPC  R0,R21
000172 f428      	BRSH _0x1D
                 ; 0000 0098       {i1=i1+1;}
000173 85ec      	LDD  R30,Y+12
000174 85fd      	LDD  R31,Y+12+1
000175 9631      	ADIW R30,1
000176 87ec      	STD  Y+12,R30
000177 87fd      	STD  Y+12+1,R31
                 ; 0000 0099       if(p1==0)
                 _0x1D:
000178 2e04      	MOV  R0,R20
000179 2a05      	OR   R0,R21
00017a f421      	BRNE _0x1E
                 ; 0000 009A       {q=3;}
00017b e0e3      	LDI  R30,LOW(3)
00017c e0f0      	LDI  R31,HIGH(3)
00017d 87ee      	STD  Y+14,R30
00017e 87ff      	STD  Y+14+1,R31
                 ; 0000 009B       p1++;
                 _0x1E:
                +
00017f 5f4f     +SUBI R20 , LOW ( - 1 )
000180 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
                 ; 0000 009C       }
                 ; 0000 009D 
                 ; 0000 009E       if(PINB.3==0)
                 _0x19:
000181 99b3      	SBIC 0x16,3
000182 c01a      	RJMP _0x1F
                 ; 0000 009F       {
                 ; 0000 00A0       delay_ms(20);
000183 d187      	RCALL SUBOPT_0x2
                 ; 0000 00A1       while(PINB.3==0);
                 _0x20:
000184 9bb3      	SBIS 0x16,3
000185 cffe      	RJMP _0x20
                 ; 0000 00A2       a1++;
000186 81e8      	LD   R30,Y
000187 81f9      	LDD  R31,Y+1
000188 9631      	ADIW R30,1
000189 83e8      	ST   Y,R30
00018a 83f9      	STD  Y+1,R31
                 ; 0000 00A3       if(p1>0)
00018b 2400      	CLR  R0
00018c 1604      	CP   R0,R20
00018d 0605      	CPC  R0,R21
00018e f428      	BRSH _0x23
                 ; 0000 00A4       {a++;}
00018f 81ea      	LDD  R30,Y+2
000190 81fb      	LDD  R31,Y+2+1
000191 9631      	ADIW R30,1
000192 83ea      	STD  Y+2,R30
000193 83fb      	STD  Y+2+1,R31
                 ; 0000 00A5       if(p1==0)
                 _0x23:
000194 2e04      	MOV  R0,R20
000195 2a05      	OR   R0,R21
000196 f421      	BRNE _0x24
                 ; 0000 00A6       {q=4;}
000197 e0e4      	LDI  R30,LOW(4)
000198 e0f0      	LDI  R31,HIGH(4)
000199 87ee      	STD  Y+14,R30
00019a 87ff      	STD  Y+14+1,R31
                 ; 0000 00A7       p1++;
                 _0x24:
                +
00019b 5f4f     +SUBI R20 , LOW ( - 1 )
00019c 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
                 ; 0000 00A8       }
                 ; 0000 00A9 
                 ; 0000 00AA 
                 ; 0000 00AB       if(PINB.4==0)
                 _0x1F:
00019d 99b4      	SBIC 0x16,4
00019e c027      	RJMP _0x25
                 ; 0000 00AC       {
                 ; 0000 00AD       delay_ms(20);
00019f d16b      	RCALL SUBOPT_0x2
                 ; 0000 00AE       while(PINB.4==0);
                 _0x26:
0001a0 9bb4      	SBIS 0x16,4
0001a1 cffe      	RJMP _0x26
                 ; 0000 00AF       c=0;p1=0;q=0;i1=0;i2=0;i4=0;x=0;
                +
0001a2 e020     +LDI R18 , LOW ( 0 )
0001a3 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
0001a4 e040     +LDI R20 , LOW ( 0 )
0001a5 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
0001a6 e0e0      	LDI  R30,LOW(0)
0001a7 87ee      	STD  Y+14,R30
0001a8 87ef      	STD  Y+14+1,R30
0001a9 87ec      	STD  Y+12,R30
0001aa 87ed      	STD  Y+12+1,R30
0001ab 87ea      	STD  Y+10,R30
0001ac 87eb      	STD  Y+10+1,R30
0001ad 87e8      	STD  Y+8,R30
0001ae 87e9      	STD  Y+8+1,R30
0001af 83ee      	STD  Y+6,R30
0001b0 83ef      	STD  Y+6+1,R30
                 ; 0000 00B0       i3=0;a=0;a1=0;
0001b1 83ec      	STD  Y+4,R30
0001b2 83ed      	STD  Y+4+1,R30
0001b3 83ea      	STD  Y+2,R30
0001b4 83eb      	STD  Y+2+1,R30
0001b5 83e8      	STD  Y+0,R30
0001b6 83e9      	STD  Y+0+1,R30
                 ; 0000 00B1 
                 ; 0000 00B2        for(j=0;j<4;j++)
0001b7 e010      	LDI  R17,LOW(0)
                 _0x2A:
0001b8 3014      	CPI  R17,4
0001b9 f428      	BRSH _0x2B
                 ; 0000 00B3     {
                 ; 0000 00B4     data[j]=0;
0001ba d146      	RCALL SUBOPT_0x0
0001bb e0a0      	LDI  R26,LOW(0)
0001bc 83a0      	STD  Z+0,R26
                 ; 0000 00B5     }
0001bd 5f1f      	SUBI R17,-1
0001be cff9      	RJMP _0x2A
                 _0x2B:
                 ; 0000 00B6 
                 ; 0000 00B7      for(j=0;j<10;j++) display();
0001bf e010      	LDI  R17,LOW(0)
                 _0x2D:
0001c0 301a      	CPI  R17,10
0001c1 f418      	BRSH _0x2E
0001c2 df10      	RCALL _display
0001c3 5f1f      	SUBI R17,-1
0001c4 cffb      	RJMP _0x2D
                 _0x2E:
                 ; 0000 00B9 goto l1;
0001c5 cf68      	RJMP _0xA
                 ; 0000 00BA       }
                 ; 0000 00BB 
                 ; 0000 00BC       if(q==1)
                 _0x25:
0001c6 85ae      	LDD  R26,Y+14
0001c7 85bf      	LDD  R27,Y+14+1
0001c8 9711      	SBIW R26,1
0001c9 f4d1      	BRNE _0x2F
                 ; 0000 00BD       {
                 ; 0000 00BE       lcd_clear();
0001ca d0e0      	RCALL _lcd_clear
                 ; 0000 00BF       lcd_puts("Food A");
                +
0001cb e7a4     +LDI R26 , LOW ( _0xC + ( 20 ) )
0001cc e0b2     +LDI R27 , HIGH ( _0xC + ( 20 ) )
                 	__POINTW2MN _0xC,20
0001cd d138      	RCALL SUBOPT_0x1
                 ; 0000 00C0       lcd_gotoxy(0,1);
                 ; 0000 00C1       lcd_puts("Price=50 cent");
                +
0001ce e7ab     +LDI R26 , LOW ( _0xC + ( 27 ) )
0001cf e0b2     +LDI R27 , HIGH ( _0xC + ( 27 ) )
                 	__POINTW2MN _0xC,27
0001d0 d0f8      	RCALL _lcd_puts
                 ; 0000 00C2       x=50;
0001d1 e3e2      	LDI  R30,LOW(50)
0001d2 e0f0      	LDI  R31,HIGH(50)
0001d3 d13b      	RCALL SUBOPT_0x3
                 ; 0000 00C3       if(i1==50)
0001d4 97d2      	SBIW R26,50
0001d5 f429      	BRNE _0x30
                 ; 0000 00C4       {
                 ; 0000 00C5       lcd_clear();
0001d6 d0d4      	RCALL _lcd_clear
                 ; 0000 00C6       lcd_puts("paid");delay_ms(1000);q=0;c=0;  goto l1;
                +
0001d7 e8a9     +LDI R26 , LOW ( _0xC + ( 41 ) )
0001d8 e0b2     +LDI R27 , HIGH ( _0xC + ( 41 ) )
                 	__POINTW2MN _0xC,41
0001d9 d13a      	RCALL SUBOPT_0x4
0001da cf53      	RJMP _0xA
                 ; 0000 00C7       }
                 ; 0000 00C8 
                 ; 0000 00C9        if(i1>50)
                 _0x30:
0001db 85ac      	LDD  R26,Y+12
0001dc 85bd      	LDD  R27,Y+12+1
0001dd 97d3      	SBIW R26,51
0001de f028      	BRLO _0x31
                 ; 0000 00CA       {
                 ; 0000 00CB       lcd_clear();
0001df d0cb      	RCALL _lcd_clear
                 ; 0000 00CC       lcd_puts("extra paid"); delay_ms(1000);q=0;c=0;  goto l1;
                +
0001e0 e8ae     +LDI R26 , LOW ( _0xC + ( 46 ) )
0001e1 e0b2     +LDI R27 , HIGH ( _0xC + ( 46 ) )
                 	__POINTW2MN _0xC,46
0001e2 d131      	RCALL SUBOPT_0x4
0001e3 cf4a      	RJMP _0xA
                 ; 0000 00CD       }
                 ; 0000 00CE 
                 ; 0000 00CF       }
                 _0x31:
                 ; 0000 00D0 
                 ; 0000 00D1        if(q==2)
                 _0x2F:
0001e4 85ae      	LDD  R26,Y+14
0001e5 85bf      	LDD  R27,Y+14+1
0001e6 9712      	SBIW R26,2
0001e7 f4f1      	BRNE _0x32
                 ; 0000 00D2       {
                 ; 0000 00D3       lcd_clear();
0001e8 d0c2      	RCALL _lcd_clear
                 ; 0000 00D4       lcd_puts("Food B");
                +
0001e9 e9a9     +LDI R26 , LOW ( _0xC + ( 57 ) )
0001ea e0b2     +LDI R27 , HIGH ( _0xC + ( 57 ) )
                 	__POINTW2MN _0xC,57
0001eb d11a      	RCALL SUBOPT_0x1
                 ; 0000 00D5       lcd_gotoxy(0,1);
                 ; 0000 00D6       lcd_puts("Price=65 cent");
                +
0001ec eaa0     +LDI R26 , LOW ( _0xC + ( 64 ) )
0001ed e0b2     +LDI R27 , HIGH ( _0xC + ( 64 ) )
                 	__POINTW2MN _0xC,64
0001ee d0da      	RCALL _lcd_puts
                 ; 0000 00D7       x=65;
0001ef e4e1      	LDI  R30,LOW(65)
0001f0 e0f0      	LDI  R31,HIGH(65)
0001f1 d11d      	RCALL SUBOPT_0x3
                 ; 0000 00D8       if(i1==65)
0001f2 34a1      	CPI  R26,LOW(0x41)
0001f3 e0e0      	LDI  R30,HIGH(0x41)
0001f4 07be      	CPC  R27,R30
0001f5 f429      	BRNE _0x33
                 ; 0000 00D9       {
                 ; 0000 00DA       lcd_clear();
0001f6 d0b4      	RCALL _lcd_clear
                 ; 0000 00DB       lcd_puts("paid"); delay_ms(1000);q=0;c=0; goto l1;
                +
0001f7 eaae     +LDI R26 , LOW ( _0xC + ( 78 ) )
0001f8 e0b2     +LDI R27 , HIGH ( _0xC + ( 78 ) )
                 	__POINTW2MN _0xC,78
0001f9 d11a      	RCALL SUBOPT_0x4
0001fa cf33      	RJMP _0xA
                 ; 0000 00DC       }
                 ; 0000 00DD 
                 ; 0000 00DE        if(i1>65)
                 _0x33:
0001fb 85ac      	LDD  R26,Y+12
0001fc 85bd      	LDD  R27,Y+12+1
0001fd 34a2      	CPI  R26,LOW(0x42)
0001fe e0e0      	LDI  R30,HIGH(0x42)
0001ff 07be      	CPC  R27,R30
000200 f028      	BRLO _0x34
                 ; 0000 00DF       {
                 ; 0000 00E0       lcd_clear();
000201 d0a9      	RCALL _lcd_clear
                 ; 0000 00E1       lcd_puts("extra paid");  delay_ms(1000);q=0;c=0;  goto l1;
                +
000202 eba3     +LDI R26 , LOW ( _0xC + ( 83 ) )
000203 e0b2     +LDI R27 , HIGH ( _0xC + ( 83 ) )
                 	__POINTW2MN _0xC,83
000204 d10f      	RCALL SUBOPT_0x4
000205 cf28      	RJMP _0xA
                 ; 0000 00E2       }
                 ; 0000 00E3 
                 ; 0000 00E4       }
                 _0x34:
                 ; 0000 00E5 
                 ; 0000 00E6        if(q==3)
                 _0x32:
000206 85ae      	LDD  R26,Y+14
000207 85bf      	LDD  R27,Y+14+1
000208 9713      	SBIW R26,3
000209 f4f1      	BRNE _0x35
                 ; 0000 00E7       {
                 ; 0000 00E8       lcd_clear();
00020a d0a0      	RCALL _lcd_clear
                 ; 0000 00E9       lcd_puts("Food C");
                +
00020b ebae     +LDI R26 , LOW ( _0xC + ( 94 ) )
00020c e0b2     +LDI R27 , HIGH ( _0xC + ( 94 ) )
                 	__POINTW2MN _0xC,94
00020d d0f8      	RCALL SUBOPT_0x1
                 ; 0000 00EA       lcd_gotoxy(0,1);
                 ; 0000 00EB       lcd_puts("Price=77 cent");
                +
00020e eca5     +LDI R26 , LOW ( _0xC + ( 101 ) )
00020f e0b2     +LDI R27 , HIGH ( _0xC + ( 101 ) )
                 	__POINTW2MN _0xC,101
000210 d0b8      	RCALL _lcd_puts
                 ; 0000 00EC       x=77;
000211 e4ed      	LDI  R30,LOW(77)
000212 e0f0      	LDI  R31,HIGH(77)
000213 d0fb      	RCALL SUBOPT_0x3
                 ; 0000 00ED       if(i1==77)
000214 34ad      	CPI  R26,LOW(0x4D)
000215 e0e0      	LDI  R30,HIGH(0x4D)
000216 07be      	CPC  R27,R30
000217 f429      	BRNE _0x36
                 ; 0000 00EE       {
                 ; 0000 00EF       lcd_clear();
000218 d092      	RCALL _lcd_clear
                 ; 0000 00F0       lcd_puts("paid");   delay_ms(1000);q=0;c=0; goto l1;
                +
000219 eda3     +LDI R26 , LOW ( _0xC + ( 115 ) )
00021a e0b2     +LDI R27 , HIGH ( _0xC + ( 115 ) )
                 	__POINTW2MN _0xC,115
00021b d0f8      	RCALL SUBOPT_0x4
00021c cf11      	RJMP _0xA
                 ; 0000 00F1       }
                 ; 0000 00F2 
                 ; 0000 00F3        if(i1>77)
                 _0x36:
00021d 85ac      	LDD  R26,Y+12
00021e 85bd      	LDD  R27,Y+12+1
00021f 34ae      	CPI  R26,LOW(0x4E)
000220 e0e0      	LDI  R30,HIGH(0x4E)
000221 07be      	CPC  R27,R30
000222 f028      	BRLO _0x37
                 ; 0000 00F4       {
                 ; 0000 00F5       lcd_clear();
000223 d087      	RCALL _lcd_clear
                 ; 0000 00F6       lcd_puts("extra paid");  delay_ms(1000);q=0;c=0;  goto l1;
                +
000224 eda8     +LDI R26 , LOW ( _0xC + ( 120 ) )
000225 e0b2     +LDI R27 , HIGH ( _0xC + ( 120 ) )
                 	__POINTW2MN _0xC,120
000226 d0ed      	RCALL SUBOPT_0x4
000227 cf06      	RJMP _0xA
                 ; 0000 00F7       }
                 ; 0000 00F8 
                 ; 0000 00F9       }
                 _0x37:
                 ; 0000 00FA 
                 ; 0000 00FB        if(q==4)
                 _0x35:
000228 85ae      	LDD  R26,Y+14
000229 85bf      	LDD  R27,Y+14+1
00022a 9714      	SBIW R26,4
00022b f4e1      	BRNE _0x38
                 ; 0000 00FC       {
                 ; 0000 00FD       lcd_clear();
00022c d07e      	RCALL _lcd_clear
                 ; 0000 00FE       lcd_puts("Food D");
                +
00022d eea3     +LDI R26 , LOW ( _0xC + ( 131 ) )
00022e e0b2     +LDI R27 , HIGH ( _0xC + ( 131 ) )
                 	__POINTW2MN _0xC,131
00022f d0d6      	RCALL SUBOPT_0x1
                 ; 0000 00FF       lcd_gotoxy(0,1);
                 ; 0000 0100       lcd_puts("Price=63 cent");
                +
000230 eeaa     +LDI R26 , LOW ( _0xC + ( 138 ) )
000231 e0b2     +LDI R27 , HIGH ( _0xC + ( 138 ) )
                 	__POINTW2MN _0xC,138
000232 d096      	RCALL _lcd_puts
                 ; 0000 0101       x=63;
000233 e3ef      	LDI  R30,LOW(63)
000234 e0f0      	LDI  R31,HIGH(63)
000235 d0d9      	RCALL SUBOPT_0x3
                 ; 0000 0102       if(i1==63)
000236 97df      	SBIW R26,63
000237 f429      	BRNE _0x39
                 ; 0000 0103       {
                 ; 0000 0104       lcd_clear();
000238 d072      	RCALL _lcd_clear
                 ; 0000 0105       lcd_puts("paid");  delay_ms(1000);q=0;c=0;     goto l1;
                +
000239 efa8     +LDI R26 , LOW ( _0xC + ( 152 ) )
00023a e0b2     +LDI R27 , HIGH ( _0xC + ( 152 ) )
                 	__POINTW2MN _0xC,152
00023b d0d8      	RCALL SUBOPT_0x4
00023c cef1      	RJMP _0xA
                 ; 0000 0106       }
                 ; 0000 0107 
                 ; 0000 0108        if(i1>63)
                 _0x39:
00023d 85ac      	LDD  R26,Y+12
00023e 85bd      	LDD  R27,Y+12+1
00023f 34a0      	CPI  R26,LOW(0x40)
000240 e0e0      	LDI  R30,HIGH(0x40)
000241 07be      	CPC  R27,R30
000242 f028      	BRLO _0x3A
                 ; 0000 0109       {
                 ; 0000 010A       lcd_clear();
000243 d067      	RCALL _lcd_clear
                 ; 0000 010B       lcd_puts("extra paid");  delay_ms(1000);q=0;c=0;        goto l1;
                +
000244 efad     +LDI R26 , LOW ( _0xC + ( 157 ) )
000245 e0b2     +LDI R27 , HIGH ( _0xC + ( 157 ) )
                 	__POINTW2MN _0xC,157
000246 d0cd      	RCALL SUBOPT_0x4
000247 cee6      	RJMP _0xA
                 ; 0000 010C       }
                 ; 0000 010D 
                 ; 0000 010E       }
                 _0x3A:
                 ; 0000 010F 
                 ; 0000 0110       i2=i1;
                 _0x38:
000248 85ec      	LDD  R30,Y+12
000249 85fd      	LDD  R31,Y+12+1
00024a 87ea      	STD  Y+10,R30
00024b 87fb      	STD  Y+10+1,R31
                 ; 0000 0111       i3=i2-x;
00024c 81ae      	LDD  R26,Y+6
00024d 81bf      	LDD  R27,Y+6+1
00024e 1bea      	SUB  R30,R26
00024f 0bfb      	SBC  R31,R27
000250 83ec      	STD  Y+4,R30
000251 83fd      	STD  Y+4+1,R31
                 ; 0000 0112       if(a==1)
000252 81aa      	LDD  R26,Y+2
000253 81bb      	LDD  R27,Y+2+1
000254 9711      	SBIW R26,1
000255 f421      	BRNE _0x3B
                 ; 0000 0113       {
                 ; 0000 0114       i3=i2;
000256 85ea      	LDD  R30,Y+10
000257 85fb      	LDD  R31,Y+10+1
000258 83ec      	STD  Y+4,R30
000259 83fd      	STD  Y+4+1,R31
                 ; 0000 0115       }
                 ; 0000 0116      for(j=0;j<4;j++)
                 _0x3B:
00025a e010      	LDI  R17,LOW(0)
                 _0x3D:
00025b 3014      	CPI  R17,4
00025c f4c8      	BRSH _0x3E
                 ; 0000 0117     {
                 ; 0000 0118 
                 ; 0000 0119     if(i3>0)
00025d 81ac      	LDD  R26,Y+4
00025e 81bd      	LDD  R27,Y+4+1
00025f 940e 036c 	CALL __CPW02
000261 f494      	BRGE _0x3F
                 ; 0000 011A     {
                 ; 0000 011B     data[j]=i3%10;
000262 d09e      	RCALL SUBOPT_0x0
000263 01bf      	MOVW R22,R30
000264 81ac      	LDD  R26,Y+4
000265 81bd      	LDD  R27,Y+4+1
000266 e0ea      	LDI  R30,LOW(10)
000267 e0f0      	LDI  R31,HIGH(10)
000268 940e 0350 	CALL __MODW21
00026a 01db      	MOVW R26,R22
00026b 93ec      	ST   X,R30
                 ; 0000 011C     i3=i3/10;
00026c 81ac      	LDD  R26,Y+4
00026d 81bd      	LDD  R27,Y+4+1
00026e e0ea      	LDI  R30,LOW(10)
00026f e0f0      	LDI  R31,HIGH(10)
000270 940e 034b 	CALL __DIVW21
000272 83ec      	STD  Y+4,R30
000273 83fd      	STD  Y+4+1,R31
                 ; 0000 011D     }
                 ; 0000 011E     }
                 _0x3F:
000274 5f1f      	SUBI R17,-1
000275 cfe5      	RJMP _0x3D
                 _0x3E:
                 ; 0000 011F 
                 ; 0000 0120      for(j=0;j<10;j++) display();
000276 e010      	LDI  R17,LOW(0)
                 _0x41:
000277 301a      	CPI  R17,10
000278 f418      	BRSH _0x42
000279 de59      	RCALL _display
00027a 5f1f      	SUBI R17,-1
00027b cffb      	RJMP _0x41
                 _0x42:
                 ; 0000 0122 }
00027c ceb1      	RJMP _0x7
                 ; 0000 0123 
                 ; 0000 0124 }
                 _0x43:
00027d cfff      	RJMP _0x43
                 ; .FEND
                 
                 	.DSEG
                 _0xC:
000260           	.BYTE 0xA8
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00027e 93aa      	ST   -Y,R26
00027f b3eb      	IN   R30,0x1B
000280 70ef      	ANDI R30,LOW(0xF)
000281 2fae      	MOV  R26,R30
000282 81e8      	LD   R30,Y
000283 7fe0      	ANDI R30,LOW(0xF0)
000284 2bea      	OR   R30,R26
000285 bbeb      	OUT  0x1B,R30
                +
000286 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000287 958a     +DEC R24
000288 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000289 9ada      	SBI  0x1B,2
                +
00028a e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00028b 958a     +DEC R24
00028c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
00028d 98da      	CBI  0x1B,2
                +
00028e e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00028f 958a     +DEC R24
000290 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000291 c06d      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000292 93aa      	ST   -Y,R26
000293 81a8      	LD   R26,Y
000294 dfe9      	RCALL __lcd_write_nibble_G100
000295 81e8          ld    r30,y
000296 95e2          swap  r30
000297 83e8          st    y,r30
000298 81a8      	LD   R26,Y
000299 dfe4      	RCALL __lcd_write_nibble_G100
                +
00029a e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
00029b 958a     +DEC R24
00029c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
00029d c061      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00029e 93aa      	ST   -Y,R26
00029f 81e8      	LD   R30,Y
0002a0 e0f0      	LDI  R31,0
0002a1 5fe4      	SUBI R30,LOW(-__base_y_G100)
0002a2 4ffc      	SBCI R31,HIGH(-__base_y_G100)
0002a3 81e0      	LD   R30,Z
0002a4 81a9      	LDD  R26,Y+1
0002a5 0fae      	ADD  R26,R30
0002a6 dfeb      	RCALL __lcd_write_data
0002a7 8059      	LDD  R5,Y+1
0002a8 8048      	LDD  R4,Y+0
0002a9 9622      	ADIW R28,2
0002aa 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002ab e0a2      	LDI  R26,LOW(2)
0002ac d072      	RCALL SUBOPT_0x5
0002ad e0ac      	LDI  R26,LOW(12)
0002ae dfe3      	RCALL __lcd_write_data
0002af e0a1      	LDI  R26,LOW(1)
0002b0 d06e      	RCALL SUBOPT_0x5
0002b1 e0e0      	LDI  R30,LOW(0)
0002b2 2e4e      	MOV  R4,R30
0002b3 2e5e      	MOV  R5,R30
0002b4 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002b5 93aa      	ST   -Y,R26
0002b6 81a8      	LD   R26,Y
0002b7 30aa      	CPI  R26,LOW(0xA)
0002b8 f011      	BREQ _0x2000005
0002b9 1457      	CP   R5,R7
0002ba f040      	BRLO _0x2000004
                 _0x2000005:
0002bb e0e0      	LDI  R30,LOW(0)
0002bc 93ea      	ST   -Y,R30
0002bd 9443      	INC  R4
0002be 2da4      	MOV  R26,R4
0002bf dfde      	RCALL _lcd_gotoxy
0002c0 81a8      	LD   R26,Y
0002c1 30aa      	CPI  R26,LOW(0xA)
0002c2 f1e1      	BREQ _0x2020001
                 _0x2000004:
0002c3 9453      	INC  R5
0002c4 9ad8      	SBI  0x1B,0
0002c5 81a8      	LD   R26,Y
0002c6 dfcb      	RCALL __lcd_write_data
0002c7 98d8      	CBI  0x1B,0
0002c8 c036      	RJMP _0x2020001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0002c9 93ba      	ST   -Y,R27
0002ca 93aa      	ST   -Y,R26
0002cb 931a      	ST   -Y,R17
                 _0x2000008:
0002cc 81a9      	LDD  R26,Y+1
0002cd 81ba      	LDD  R27,Y+1+1
0002ce 91ed      	LD   R30,X+
0002cf 83a9      	STD  Y+1,R26
0002d0 83ba      	STD  Y+1+1,R27
0002d1 2f1e      	MOV  R17,R30
0002d2 30e0      	CPI  R30,0
0002d3 f019      	BREQ _0x200000A
0002d4 2fa1      	MOV  R26,R17
0002d5 dfdf      	RCALL _lcd_putchar
0002d6 cff5      	RJMP _0x2000008
                 _0x200000A:
0002d7 8118      	LDD  R17,Y+0
0002d8 9623      	ADIW R28,3
0002d9 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0002da 93aa      	ST   -Y,R26
0002db b3ea      	IN   R30,0x1A
0002dc 6fe0      	ORI  R30,LOW(0xF0)
0002dd bbea      	OUT  0x1A,R30
0002de 9ad2      	SBI  0x1A,2
0002df 9ad0      	SBI  0x1A,0
0002e0 9ad1      	SBI  0x1A,1
0002e1 98da      	CBI  0x1B,2
0002e2 98d8      	CBI  0x1B,0
0002e3 98d9      	CBI  0x1B,1
0002e4 8078      	LDD  R7,Y+0
0002e5 81e8      	LD   R30,Y
0002e6 58e0      	SUBI R30,-LOW(128)
                +
0002e7 93e0 030e+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0002e9 81e8      	LD   R30,Y
0002ea 54e0      	SUBI R30,-LOW(192)
                +
0002eb 93e0 030f+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0002ed d01d      	RCALL SUBOPT_0x2
0002ee d035      	RCALL SUBOPT_0x6
0002ef d034      	RCALL SUBOPT_0x6
0002f0 d033      	RCALL SUBOPT_0x6
0002f1 e2a0      	LDI  R26,LOW(32)
0002f2 df8b      	RCALL __lcd_write_nibble_G100
                +
0002f3 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
0002f4 958a     +DEC R24
0002f5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
0002f6 e2a8      	LDI  R26,LOW(40)
0002f7 df9a      	RCALL __lcd_write_data
0002f8 e0a4      	LDI  R26,LOW(4)
0002f9 df98      	RCALL __lcd_write_data
0002fa e8a5      	LDI  R26,LOW(133)
0002fb df96      	RCALL __lcd_write_data
0002fc e0a6      	LDI  R26,LOW(6)
0002fd df94      	RCALL __lcd_write_data
0002fe dfac      	RCALL _lcd_clear
                 _0x2020001:
0002ff 9621      	ADIW R28,1
000300 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _data:
000308           	.BYTE 0x4
                 __base_y_G100:
00030c           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000301 2fe1      	MOV  R30,R17
000302 e0f0      	LDI  R31,0
000303 5fe8      	SUBI R30,LOW(-_data)
000304 4ffc      	SBCI R31,HIGH(-_data)
000305 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x1:
000306 dfc2      	RCALL _lcd_puts
000307 e0e0      	LDI  R30,LOW(0)
000308 93ea      	ST   -Y,R30
000309 e0a1      	LDI  R26,LOW(1)
00030a cf93      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
00030b e1a4      	LDI  R26,LOW(20)
00030c e0b0      	LDI  R27,0
00030d 940c 032a 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
00030f 83ee      	STD  Y+6,R30
000310 83ff      	STD  Y+6+1,R31
000311 85ac      	LDD  R26,Y+12
000312 85bd      	LDD  R27,Y+12+1
000313 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:60 WORDS
                 SUBOPT_0x4:
000314 dfb4      	RCALL _lcd_puts
000315 eea8      	LDI  R26,LOW(1000)
000316 e0b3      	LDI  R27,HIGH(1000)
000317 940e 032a 	CALL _delay_ms
000319 e0e0      	LDI  R30,LOW(0)
00031a 87ee      	STD  Y+14,R30
00031b 87ef      	STD  Y+14+1,R30
                +
00031c e020     +LDI R18 , LOW ( 0 )
00031d e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
00031e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
00031f df72      	RCALL __lcd_write_data
000320 e0a3      	LDI  R26,LOW(3)
000321 e0b0      	LDI  R27,0
000322 940c 032a 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6:
000324 e3a0      	LDI  R26,LOW(48)
000325 df58      	RCALL __lcd_write_nibble_G100
                +
000326 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000327 958a     +DEC R24
000328 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000329 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00032a 9610      	adiw r26,0
00032b f039      	breq __delay_ms1
                 __delay_ms0:
                +
00032c ef8a     +LDI R24 , LOW ( 0xFA )
00032d e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
00032e 9701     +SBIW R24 , 1
00032f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000330 95a8      	wdr
000331 9711      	sbiw r26,1
000332 f7c9      	brne __delay_ms0
                 __delay_ms1:
000333 9508      	ret
                 
                 __ANEGW1:
000334 95f1      	NEG  R31
000335 95e1      	NEG  R30
000336 40f0      	SBCI R31,0
000337 9508      	RET
                 
                 __DIVW21U:
000338 2400      	CLR  R0
000339 2411      	CLR  R1
00033a e190      	LDI  R25,16
                 __DIVW21U1:
00033b 0faa      	LSL  R26
00033c 1fbb      	ROL  R27
00033d 1c00      	ROL  R0
00033e 1c11      	ROL  R1
00033f 1a0e      	SUB  R0,R30
000340 0a1f      	SBC  R1,R31
000341 f418      	BRCC __DIVW21U2
000342 0e0e      	ADD  R0,R30
000343 1e1f      	ADC  R1,R31
000344 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000345 60a1      	SBR  R26,1
                 __DIVW21U3:
000346 959a      	DEC  R25
000347 f799      	BRNE __DIVW21U1
000348 01fd      	MOVW R30,R26
000349 01d0      	MOVW R26,R0
00034a 9508      	RET
                 
                 __DIVW21:
00034b d012      	RCALL __CHKSIGNW
00034c dfeb      	RCALL __DIVW21U
00034d f40e      	BRTC __DIVW211
00034e dfe5      	RCALL __ANEGW1
                 __DIVW211:
00034f 9508      	RET
                 
                 __MODW21:
000350 94e8      	CLT
000351 ffb7      	SBRS R27,7
000352 c004      	RJMP __MODW211
000353 95a0      	COM  R26
000354 95b0      	COM  R27
000355 9611      	ADIW R26,1
000356 9468      	SET
                 __MODW211:
000357 fdf7      	SBRC R31,7
000358 dfdb      	RCALL __ANEGW1
000359 dfde      	RCALL __DIVW21U
00035a 01fd      	MOVW R30,R26
00035b f40e      	BRTC __MODW212
00035c dfd7      	RCALL __ANEGW1
                 __MODW212:
00035d 9508      	RET
                 
                 __CHKSIGNW:
00035e 94e8      	CLT
00035f fff7      	SBRS R31,7
000360 c002      	RJMP __CHKSW1
000361 dfd2      	RCALL __ANEGW1
000362 9468      	SET
                 __CHKSW1:
000363 ffb7      	SBRS R27,7
000364 c006      	RJMP __CHKSW2
000365 95a0      	COM  R26
000366 95b0      	COM  R27
000367 9611      	ADIW R26,1
000368 f800      	BLD  R0,0
000369 9403      	INC  R0
00036a fa00      	BST  R0,0
                 __CHKSW2:
00036b 9508      	RET
                 
                 __CPW02:
00036c 2400      	CLR  R0
00036d 160a      	CP   R0,R26
00036e 060b      	CPC  R0,R27
00036f 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  39 r1 :   5 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:  23 r18:   4 r19:   4 r20:  13 r21:  13 r22:   4 r23:   0 
r24:  21 r25:   5 r26: 103 r27:  54 r28:   8 r29:   1 r30: 190 r31:  47 
x  :   6 y  : 132 z  :  10 
Registers used: 22 out of 35 (62.9%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   3 
adiw  :  13 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   5 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   5 
brlt  :   0 brmi  :   0 brne  :  26 brpl  :   0 brsh  :   9 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   8 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   9 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   6 cpc   :  10 cpi   :  13 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :   3 jmp   :  24 ld    :  15 ldd   :  49 ldi   : 134 
lds   :   0 lpm   :   7 lsl   :   1 lsr   :   0 mov   :  13 movw  :   9 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   7 
ori   :   1 out   :  45 pop   :   0 push  :   0 rcall :  73 ret   :  16 
reti  :   0 rjmp  :  36 rol   :   3 ror   :   0 sbc   :   2 sbci  :   8 
sbi   :   5 sbic  :   5 sbis  :   5 sbiw  :  15 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  19 std   :  58 sts   :   2 sub   :   2 subi  :  14 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 58 out of 116 (50.0%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006e0   1512    248   1760   32768   5.4%
[.dseg] 0x000060 0x000310      0    176    176    2048   8.6%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 3 warnings
